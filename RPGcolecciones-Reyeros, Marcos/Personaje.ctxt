#BlueJ class context
comment0.target=Personaje
comment0.text=\r\n\ Esta\ clase\ modela\ un\ personaje\ de\ un\ juego\ de\ rol.\r\n
comment1.params=nombre\ vida\ peso
comment1.target=Personaje(java.lang.String,\ java.lang.Integer,\ java.lang.Integer)
comment1.text=\r\n\ Crea\ un\ personaje\ con\ el\ nombre\ dado\ y\ configura\ los\r\n\ campos\ de\ la\ superclase\:\ vida,\ MAX_VIDA\ y\ PESO_MAXIMO_BOLSA.\r\n\ \r\n\ El\ personaje\ se\ inicializa\ sin\ bolsa,\ sin\ caldero\ y\r\n\ con\ las\ manos\ vacias.\r\n\ \r\n\ @param\ nombre\ El\ nombre\ del\ personje.\r\n\ @param\ vida\ El\ valor\ inicial\ y\ maximo\ de\ vida\ del\ personaje.\r\n\ @param\ peso\ El\ peso\ maximo\ que\ puede\ transportar\ el\ personaje.\r\n
comment10.params=nombre
comment10.target=void\ setNombre(java.lang.String)
comment11.params=
comment11.target=java.lang.Integer\ getVida()
comment12.params=vida
comment12.target=void\ setVida(java.lang.Integer)
comment13.params=vida
comment13.target=void\ resetVida(java.lang.Integer)
comment14.params=
comment14.target=Elemento\ getElemento()
comment15.params=objeto
comment15.target=void\ setElemento(Elemento)
comment2.params=bolsa
comment2.target=void\ setBolsa(Bolsa)
comment2.text=\r\n\ Establece\ la\ nueva\ bolsa\ para\ el\ personaje.\r\n\ \r\n\ Solo\ se\ puede\ asignar\ bolsas\ cuyo\ peso\ maximo\ de\ carga\r\n\ no\ supere\ el\ maximo\ soportado\ por\ el\ personaje.\ \ Si\ el\r\n\ personaje\ ya\ tiene\ una\ bolsa\ asociada,\ la\ nueva\ bolsa\r\n\ debe\ tener\ mayor\ capacidad\ que\ la\ actual.\ \ Si\ no\ se\r\n\ cumple\ algunos\ de\ los\ requisito\ se\ debe\ imprimir\:\r\n\ \ \ \ \ \ \ \ \ "Bolsa\ inapropiada"\r\n\ \r\n\ En\ caso\ de\ reemplazar\ la\ bolsa\ actual,\ deben\ pasarse\r\n\ todos\ los\ objetos\ a\ la\ nueva\ bolsa.\r\n\ \r\n\ @param\ bolsa\ La\ nueva\ bolsa\ del\ personaje.\r\n
comment3.params=
comment3.target=Bolsa\ getBolsa()
comment3.text=\r\n\ Devuelve\ la\ bolsa\ del\ personaje.\r\n\ \r\n\ @return\ La\ bolsa\ del\ personaje.\r\n
comment4.params=
comment4.target=void\ guardarElemento()
comment4.text=\r\n\ Guarda\ el\ elemento\ que\ tiene\ en\ sus\ manos\ en\ la\ bolsa,\ siempre\r\n\ y\ cuando\ haya\ lugar\ suficiente.\ \ Las\ manos\ quedan\ vacias\ (null).\r\n\ \r\n\ Si\ las\ manos\ estan\ vacias\ (null),\ mostrar\ "No\ hay\ elemento\r\n\ para\ agregar\ a\ la\ bolsa"\r\n
comment5.params=nombre
comment5.target=void\ tomarElemento(java.lang.String)
comment5.text=\r\n\ Toma\ un\ elemento\ de\ la\ bolsa\ (delElemento)\ y\ lo\ pone\r\n\ en\ las\ manos\ del\ personaje.\r\n\ \r\n\ Si\ no\ existe\ el\ elemento\ se\ debe\ imprimir\r\n\ \ \ \ \ \ \ "No\ se\ cuenta\ con\ el\ <nombre>"\r\n\ donde\ <nombre>\ es\ el\ nombre\ del\ elemento\ buscado.\r\n\ \r\n\ @param\ nombre\ El\ elemento\ a\ tomar\ de\ la\ bolsa.\r\n
comment6.params=caldero
comment6.target=void\ setCaldero(Caldero)
comment6.text=\r\n\ Asigna\ el\ caldero\ al\ personaje.\r\n\ \r\n\ @param\ caldero\ El\ caldero\ para\ el\ personaje.\r\n
comment7.params=
comment7.target=Caldero\ getCaldero()
comment7.text=\r\n\ Devuelve\ el\ caldero\ que\ posee\ el\ personaje.\r\n\ \r\n\ @return\ El\ caldero\ que\ posee\ el\ personaje.\r\n
comment8.params=receta
comment8.target=void\ prepararReceta(Receta)
comment8.text=\r\n\ Prepara\ la\ pocima\ de\ la\ receta\ en\ el\ caldero.\r\n\ \r\n\ Se\ debe\ agregar\ la\ receta\ al\ caldero\ (setReceta)\r\n\ y\ luego,\ tomar\ de\ la\ bolsa\ los\ ingredientes.\r\n\ \r\n\ En\ caso\ de\ no\ contar\ con\ todos\ los\ ingredientes\ se\r\n\ debe\ imprimir\:\r\n\ \ \ \ \ \ \ "Faltan\ <n>\ ingredientes\ para\ <receta>"\r\n\ donde\ <n>\ es\ la\ cantidad\ de\ ingredientes\ faltantes\ y\r\n\ <receta>\ es\ el\ nombre\ de\ la\ receta.\r\n\ \r\n\ @param\ receta\r\n
comment9.params=
comment9.target=java.lang.String\ getNombre()
numComments=16
