#BlueJ class context
comment0.target=Caldero
comment0.text=\r\n\ La\ clase\ caldero\ modela\ un\ recipiente\ para\ preparar\ pocimas.\r\n\ \r\n\ Se\ la\ inicializa\ con\ un\ nombre\ a\ eleccion,\ la\ cantidad\ maxima\ de\ ingredientes\r\n\ que\ admite\ y\ sin\ receta\ y\ pocima\ asociada.\r\n\ \r\n\ Cuando\ se\ tienen\ todos\ los\ ingredientes\ de\ la\ receta,\ se\ puede\ proceder\ a\r\n\ preparar\ la\ pocima.\ Solo\ se\ admiten\ recetas\ que\ no\ superen\ la\ cantidad\ maxima\r\n\ de\ ingredientes\ del\ caldero\ (capacidad).\r\n\ \r\n
comment1.params=nombre\ capacidad
comment1.target=Caldero(java.lang.String,\ java.lang.Integer)
comment1.text=\r\n\ El\ constructor\ debe\ inicializar\ el\ objeto\ con\ un\ nombre\r\n\ a\ eleccion,\ la\ capacidad\ maxima\ de\ ingredientes\ y\ sin\r\n\ receta\ y\ pocima\ asociadas\ (null).\r\n\ \r\n\ No\ olvidar\ construir\ el\ mapa\ de\ elementos\ (TreeMap).\r\n\ \r\n\ @param\ nombre\ El\ nombre\ del\ caldero.\r\n\ @param\ capacidad\ Capacidad\ maxima\ de\ ingredientes.\r\n
comment10.params=
comment10.target=Receta\ getReceta()
comment10.text=\r\n\ Devuelve\ la\ receta\ asociada.\r\n\ \r\n\ @return\ La\ receta\ asociada.\r\n
comment11.params=
comment11.target=java.lang.String\ getNombre()
comment11.text=\r\n\ Devuelve\ el\ nombre\ del\ caldero\r\n\r\n\ @return\ El\ nombre\ de\ caldero\r\n
comment12.params=
comment12.target=int\ getCapacidad()
comment12.text=\r\n\ Devuelve\ la\ capacidad\ max.\ del\ caldero\r\n\r\n\ @return\ capacidad\ max.\r\n
comment2.params=receta
comment2.target=void\ setReceta(Receta)
comment2.text=\r\n\ Asocia\ una\ receta\ al\ caldero\ para\ poder\ preparar\ una\ pocima.\r\n\ \r\n\ La\ receta\ se\ incorpora\ solo\ si\:\r\n\ \ \ 1)\ la\ cantidad\ de\ ingredientes\ no\ supera\ la\ capacidad\r\n\ \ \ \ \ \ maxima\ del\ caldero,\r\n\ \ \ 2)\ no\ hay\ una\ receta\ asociada,\r\n\ \ \ 3)\ no\ hay\ pocima\ preparada.\r\n\ Si\ la\ receta\ no\ puede\ agregarse,\ se\ debe\ imprimir\ el\r\n\ mensaje;\r\n\ \r\n\ \ "<nombre>\:\ No\ se\ puede\ agregar\ <receta>"\r\n\ \r\n\ donde\ <nombre>\ es\ el\ nombre\ del\ caldero\ y\ <receta>\ es\ el\r\n\ nombre\ de\ la\ receta\ a\ agregar.\r\n\ \r\n\ Al\ agregar\ la\ receta,\ se\ deben\ generar\ las\ claves\ en\ el\ mapa\r\n\ de\ elementos\ asociadas\ a\ ningun\ objeto\ (null).\r\n\ \r\n\ @param\ receta\ La\ receta\ a\ incorporar.\r\n
comment3.params=ingrediente
comment3.target=void\ addIngrediente(Elemento)
comment3.text=\r\n\ Incorpora\ al\ caldero\ un\ ingrediente\ siempre\ y\ cuando\ pertenezca\r\n\ a\ la\ receta.\r\n\r\n\ Se\ incorpora\ el\ ingrediente\ al\ mapa\ de\ elementos,\ siendo\r\n\ su\ nombre\ (getNombre())\ la\ clave\ (key)\ y\ el\ valor\ (value)\ el\r\n\ objeto\ elemento.\r\n\ \r\n\ @param\ ingrediente\ El\ ingrediente\ a\ incorporar\ al\ caldero.\r\n
comment4.params=
comment4.target=java.util.List\ getIngredientesFaltantes()
comment4.text=\r\n\ Genera\ una\ lista\ con\ los\ nombres\ de\ los\ ingredientes\ (key)\ faltantes.\r\n\ \r\n\ Recordar\ que\ cada\ entrada\ del\ mapa\ (key)\ debe\ tener\ asociado\r\n\ un\ elemento\ (value).\ En\ caso\ contrario,\ no\ hay\ elemento\ asociado\ (null).\r\n\ \r\n\ Ayuda\:\ La\ lista\ (ArrayList)\ debe\ crearse\ localmente.\ Lista\ vacia\r\n\ \ significa\ que\ se\ cuenta\ con\ todos\ los\ ingredientes.\r\n\ \r\n\ @return\ La\ lista\ con\ los\ nombres\ de\ los\ ingredientes\ faltantes.\r\n
comment5.params=
comment5.target=java.lang.Boolean\ verificarIngredientes()
comment5.text=\r\n\ Verifica\ que\ se\ hayan\ incorporado\ todos\ los\ ingredientes.\r\n\ \r\n\ @return\ Devuelve\ true\ si\ se\ tienen\ todos\ los\ ingredientes\ y\r\n\ \ \ \ \ \ \ \ \ false\ si\ falta\ al\ menos\ uno.\r\n
comment6.params=
comment6.target=void\ prepararPocima()
comment6.text=\r\n\ Prepara\ la\ pocima\ previa\ verificacion\ que\ exista\ una\ receta\r\n\ y\ que\ se\ hayan\ incorporado\ todos\ los\ ingredientes.\r\n\ \r\n\ En\ caso\ de\ realizar\ la\ pocima\ se\ debe\:\r\n\ \ 1)\ crear\ el\ objeto\ de\ tipo\ Elemento\ cuyo\ nombre\ es\ la\r\n\ \ \ \ \ concatenacion\ de\ "Pocima\ de"\ con\ el\ nombre\ de\ la\ receta\r\n\ \ \ \ \ y\ su\ peso\ es\ la\ suma\ de\ los\ pesos\ de\ cada\ ingrediente.\r\n\ \ 2)\ desvincular\ la\ receta\ del\ caldero\r\n\ \ 3)\ limpiar\ el\ mapa\ de\ ingredientes\r\n\ \r\n\ Si\ no\ se\ puede\ prepara\ la\ pocima,\ se\ debe\ imprimir\ el\r\n\ mensaje;\r\n\ \r\n\ \ "<nombre>\:\ No\ se\ puede\ preparar\ la\ pocima"\r\n\ \r\n\ donde\ <nombre>\ es\ el\ nombre\ del\ caldero\ \r\n
comment7.params=
comment7.target=Elemento\ getPocima()
comment7.text=\r\n\ Retorna\ la\ pocima\ preparada\ y\ restablece\ a\ null\ el\ campo.\r\n\ \r\n\ @return\ La\ pocima\ preparada.\r\n
comment8.params=
comment8.target=java.lang.String\ toString()
comment8.text=\r\n\ Genera\ una\ cadena\ con\ la\ informacion\ sobre\ el\ caldero.\r\n\ \r\n\ Debe\ generarse\ usando\ el\ nombre\ y\ la\ receta\ asociada\ o\ la\ pocima\ segun\:\r\n\ \ \ \ "<nombre>\:\ ["vacio"\ |\ <receta>\ |\ <pocima>]"\r\n\ \r\n\ Ejemplo\ sin\ receta\ ni\ pocima\:\r\n\ \ \ \ "Caldero\ mediano\:\ vacio"\r\n\ \r\n\ Ejemplo\ con\ receta\:\r\n\ \ \ \ "Caldero\ mediano\:\ Receta\ voladora"\r\n\ \r\n\ Ejemplo\ con\ pocima\:\r\n\ \ \ \ "Caldero\ mediano\:\ Pocima\ de\ Receta\ voladora"\r\n\ \r\n\ @return\ El\ texto\ indicado\ en\ el\ ejemplo.\r\n
comment9.params=
comment9.target=java.util.Map\ getIngredientes()
comment9.text=\r\n\ Devuelve\ el\ mapa\ de\ ingredientes.\r\n\ \r\n\ @return\ El\ mapa\ de\ ingredientes.\r\n
numComments=13
